# ----------------------------------------------------Question 2 -------------------------------------------------------
import sympy as sym
import control as ctrl
import matplotlib.pyplot as plt
import numpy as np

# Defining Variables
m, ell, x3, x4, M, g, F, m = sym.symbols('m, ell, x3, x4, M, g, F, m')

# φ(F, x3, x4)
phi = 4*m*ell*x4**2*sym.sin(x3) + 4*F - 3*m*g*sym.sin(x3)*sym.cos(x3)
phi /= 4*(M+m) - 3*m*sym.cos(x3)**2

#  ψ(F, x3, x4)
psi = -3*(m*ell*(x4)**2*sym.sin(x3)*sym.cos(x3)+F*sym.cos(x3)-(M+m)*g*sym.sin(x3))
psi /= ((4*(M+m)-3*m*sym.cos(x3)**2)*ell)

# Differentiating Equations
dphi_x3 = phi.diff(x3)
dphi_x4 = phi.diff(x4)
dphi_F = phi.diff(F)

dpsi_x3 = psi.diff(x3)
dpsi_x4 = psi.diff(x4)
dpsi_F = psi.diff(F)

# Equilibrium point
Feq = 0
x3eq = 0
x4eq = 0

# Defining (F, x3, x4) at Equilibrium
dphi_F_eq = dphi_F.subs([(F, Feq), (x3, x3eq), (x4, x4eq)])
dphi_x3_eq = dphi_x3.subs([(F, Feq), (x3, x3eq), (x4, x4eq)])
dphi_x4_eq = dphi_x4.subs([(F, Feq), (x3, x3eq), (x4, x4eq)])

dpsi_F_eq = dpsi_F.subs([(F, Feq), (x3, x3eq), (x4, x4eq)])
dpsi_x3_eq = dpsi_x3.subs([(F, Feq), (x3, x3eq), (x4, x4eq)])
dpsi_x4_eq = dpsi_x4.subs([(F, Feq), (x3, x3eq), (x4, x4eq)])

# Displaying phi evaluated at equilibrium
sym.pprint(dphi_F_eq)
sym.pprint(dphi_x3_eq)
sym.pprint(dphi_x4_eq)

# Displaying psi evaluated at equilibrium
sym.pprint(dpsi_F_eq)
sym.pprint(dpsi_x3_eq)
sym.pprint(dpsi_x4_eq)

# Definitions of positive real constants
a = dphi_F_eq
b = -dphi_x3_eq
c = 3/(ell(4*M + m))
d = 3+(M+m)*g/(ell(4*M + m))
# ---------------------------------------------------------------------------------------------------------------------
s, t = sym.symbols('s, t')

# Derived transfer functions
transfer_function_F_to_x3 = -c/(s**2 - d)
transfer_function_F_to_x1 = (a*(s**2 - d) + b*c)/(s**2)(s**2-d)
